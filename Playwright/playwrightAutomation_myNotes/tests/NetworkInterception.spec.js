/*
This is example of network response interception in Playwright

This code is a test script using Playwright, a Node.js library for browser automation. It includes setup for API utilities, login payload, order payload, and a fake payload for orders. Here's a detailed breakdown:
Imports and Initial Setup
JavaScriptconst { test, expect, request } = require('@playwright/test');
const { APiUtils } = require('../utils/APiUtils');
const loginPayLoad = { userEmail: "anshika@gmail.com", userPassword: "Iamking@000" };
const orderPayLoad = { orders: [{ country: "India", productOrderedId: "6262e95ae26b7e1a10e89bf0" }] };
const fakePayLoadOrders = { data: [], message: "No Orders" };


Playwright Test Imports: test, expect, and request are imported from Playwright.
API Utilities Import: APiUtils is imported from a local utility module.
Payloads: loginPayLoad contains user credentials, orderPayLoad contains order details, and fakePayLoadOrders is a mock response for orders.

Before All Tests
JavaScript
let response;
test.beforeAll(async () => {
  const apiContext = await request.newContext();
  const apiUtils = new APiUtils(apiContext, loginPayLoad);
  response = await apiUtils.createOrder(orderPayLoad);
});


Setup API Context: Creates a new API context.
Initialize API Utilities: Instantiates APiUtils with the API context and login payload.
Create Order: Calls createOrder method from APiUtils with the order payload and stores the response.

Test: Place the Order
JavaScript
test('@SP Place the order', async ({ page }) => {
  page.addInitScript(value => {
    window.localStorage.setItem('token', value);
  }, response.token);
  await page.goto("https://rahulshettyacademy.com/client");


Set Token in Local Storage: Adds a script to set the token in local storage using the response token.
Navigate to Client Page: Opens the client page URL.

Route Interception and Mocking Response
JavaScript  
await page.route("https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*",
    async route => {
      const response = await page.request.fetch(route.request());
      let body = JSON.stringify(fakePayLoadOrders);
      route.fulfill({
        response,
        body,
      });
    });


Intercept API Call: Intercepts the API call to get orders for the customer.
Fetch Original Request: Fetches the original request.
Mock Response: Replaces the response body with fakePayLoadOrders.

Interaction and Validation
JavaScript  
await page.locator("button[routerlink*='myorders']").click();
  await page.waitForResponse("https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*");
  console.log(await page.locator(".mt-4").textContent());
});


Click My Orders Button: Clicks the button to navigate to the orders page.
Wait for API Response: Waits for the intercepted API response.
Log Order Text: Logs the text content of the orders section.

Summary

Setup: Initializes API context and utilities, logs in, and creates an order.
Test Execution: Sets token, navigates to the client page, intercepts and mocks the API response, interacts with the UI, and logs the results.




what is route in playwright

Code Generated by Sidekick is for learning and experimentation purposes only. For other use cases, please see the guidance linked here for accessing and using the Deloitte-approved tools GitHub Copilot or AWS Codewhisperer.
In Playwright, the route method is used to intercept and modify network requests made by the browser. This can be useful for testing purposes, such as mocking API responses, simulating network conditions, or validating request parameters. Here's a detailed explanation of how route works:
Basic Usage of route


Intercepting a Request
JavaScriptawait page.route('**Url*', async route => {
  // Your code to handle the route
});


The route method takes a URL pattern as its first argument. The pattern can include wildcards (*) to match multiple URLs.
The second argument is a callback function that gets executed whenever a request matching the pattern is made.



Handling the Intercepted Request
Inside the callback function, you can perform various actions such as continuing the request, aborting it, or fulfilling it with a custom response.


Continuing the Request
JavaScriptawait route.continue();

This allows the request to proceed as normal.


Aborting the Request
JavaScriptawait route.abort();

This cancels the request.


Fulfilling the Request with a Custom Response
JavaScriptawait route.fulfill({
  status: 200,
  contentType: 'application/json',
  body: JSON.stringify({ data: [], message: "No Orders" }),
});

This provides a custom response for the intercepted request.




Example: Mocking an API Response
Here's a complete example of how to use route to mock an API response:
JavaScriptawait page.route('https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*', async route => {
  // Fetch the original request
  const response = await page.request.fetch(route.request());

  // Create a fake response body
  let body = JSON.stringify({ data: [], message: "No Orders" });

  // Fulfill the request with the fake response
  route.fulfill({
    response,
    body,
  });
});

Explanation of the Example


Intercept the Request
JavaScriptawait page.route('https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*', async route => {


This line sets up an interceptor for any request matching the specified URL pattern.



Fetch the Original Request
JavaScriptconst response = await page.request.fetch(route.request());


This line fetches the original request, allowing you to inspect or modify it.



Create a Fake Response Body
JavaScriptlet body = JSON.stringify({ data: [], message: "No Orders" });


This line creates a fake response body to be used in the mocked response.



Fulfill the Request with the Fake Response
JavaScriptroute.fulfill({
  response,
  body,
});


This line fulfills the intercepted request with the fake response, effectively mocking the API call.



Use Cases for route

Mocking API Responses: Useful for testing how your application handles different API responses without needing the actual backend.
Simulating Network Conditions: You can simulate slow network conditions or network errors.
Validating Requests: Ensure that the requests being made by your application contain the correct parameters and headers.

By using route, you can gain fine-grained control over network requests in your Playwright tests, making it a powerful tool for end-to-end testing.



*/


//This file contains test using API and UI automation
//The test script uses the APIUtils class to get the token and create order
const { test, expect, request } = require('@playwright/test');
const { log } = require('console');
const { APIUtils } = require('./APIUtils');
const loginPayload = { "userEmail": "sam@mailinator.com", "userPassword": "SamKumar@123" };
const CreateOrderPayload = { "orders": [{ "country": "Cuba", "productOrderedId": "67a8dde5c0d3e6622a297cc8" }] };
const fakePayLoadOrders = { "data": [], "message": "No Orders" };
let response;

test.beforeAll(async () => {
  const apiContext = await request.newContext();
  const apiutils = new APIUtils(apiContext, loginPayload);
  response = await apiutils.createOrder(CreateOrderPayload);
  console.log("Printing response")
  console.log(response);




})

test('Network interception', async ({ page }) => {
  //This test if for login to the ecom app and select a product dynamically and add to cart and 
  //verify the product is added to cart in cart page 
  //checkout and fill the checkout page information ->select country from checkout page dynamically
  const username = page.locator('input[id="userEmail"]');
  const password = page.locator('input[id="userPassword"]');
  const sighIn = page.locator('input[id="login"]');
  const ProductList = page.locator('.card-body');
  const productSelect = "ZARA COAT 3";


  //This is to add the token taken from API script to the local storage of the browser
  page.addInitScript(value => {
    window.localStorage.setItem('token', value);

  }, response.token);

  await page.goto('https://rahulshettyacademy.com/client/');
  //   await username.fill("sam@mailinator.com");
  //   await password.fill("SamKumar@123");
  //   await sighIn.click();
  // waitForLoadState() method is used to wait for network calls to be completed
  await page.waitForLoadState('networkidle');



  await page.route("https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*",
    async route => {
      const request = await page.request.fetch(route.request());
      let body = JSON.stringify(fakePayLoadOrders);
      route.fulfill(
        {
          request,
          body,
        }
      )
    }
  );

  //Note that while clicking on this link you will be redirected to the order history page and this https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/* API will be called 
  //here * is the wildcard character which denotes to customer id and it differes for each customer.Hence we are using *
  //Also notice that route is declared before the actual API call so that it will listen to that particular API response and intercept the traffic


  //Go to order history tab
  await page.locator("[routerlink*='/myorders']").click();




  await page.waitForResponse("https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*")

  console.log(await page.locator(".mt-4").textContent());
})



test('Request Interception', async ({ page }) => {

  //login and reach orders page
  await page.goto("https://rahulshettyacademy.com/client");
  await page.locator("#userEmail").fill("anshika@gmail.com");
  await page.locator("#userPassword").fill("Iamking@000");
  await page.locator("[value='Login']").click();
  await page.waitForLoadState('networkidle');
  await page.locator(".card-body b").first().waitFor();

  await page.locator("button[routerlink*='myorders']").click();
  await page.route("https://rahulshettyacademy.com/api/ecom/order/get-orders-details?id=*",
    route => route.continue({ url: 'https://rahulshettyacademy.com/api/ecom/order/get-orders-details?id=621661f884b053f6765465b6' }))
  //Note when this click is made it will make a API call to get the order details and we are intercepting that API call and changing the URL to some other order id
  await page.locator("button:has-text('View')").first().click();
  await expect(page.locator("p").last()).toHaveText("You are not authorize to view this order");

})


test('Network block and print network calls', async ({ page }) => {
//This is to print all the network calls made by the browser
  page.on('request', request => console.log('>>', request.method(), request.url()));
  page.on('response', response => console.log('<<',response.url(),response.status()));

    //This will block any URL with png,jpg,jpeg extension
  await page.route('**/*.{png,jpg,jpeg}', route => route.abort());

  //login and reach orders page
  await page.goto("https://rahulshettyacademy.com/client");
  await page.locator("#userEmail").fill("anshika@gmail.com");
  await page.locator("#userPassword").fill("Iamking@000");
  await page.locator("[value='Login']").click();
  await page.waitForLoadState('networkidle');
  await page.locator(".card-body b").first().waitFor();
  await page.locator("button[routerlink*='myorders']").click();
  await page.locator("button:has-text('View')").first().click();
  
})

