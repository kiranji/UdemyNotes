//This test is to demonstate the storage state 
/*

In Playwright, the storage state refers to the state of the browser's storage, including cookies, local storage, and session storage. This is particularly useful for scenarios where you need to maintain a logged-in state or other persistent data across multiple test runs or sessions.
Key Concepts of Storage State in Playwright


Saving Storage State:

You can save the current storage state of a browser context to a file. This includes cookies, local storage, and session storage.
This is useful for reusing the same state across different tests or sessions without having to log in or set up the state again.



Loading Storage State:

You can load a previously saved storage state into a new browser context. This allows you to start a new session with the same state as a previous session.



How to Use Storage State in Playwright

Saving Storage State
To save the storage state, you can use the context.storageState method and write the state to a file. Here’s an example:
JavaScript// Code Generated by Sidekick is for learning and experimentation purposes only.
const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();

  // Perform login or other actions to set up the state
  await page.goto('https://example.com/login');
  await page.fill('#username', 'user');
  await page.fill('#password', 'password');
  await page.click('#login');

  // Save storage state to a file
  await context.storageState({ path: 'storageState.json' });

  await browser.close();
})();



Loading Storage State

To load the storage state from a file, you can use the storageState option when creating a new browser context. Here’s an example:
JavaScript// Code Generated by Sidekick is for learning and experimentation purposes only.
const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch();
  const context = await browser.newContext({
    storageState: 'storageState.json'
  });
  const page = await context.newPage();

  // The page will start with the state loaded from the file
  await page.goto('https://example.com');

  await browser.close();
})();

Benefits of Using Storage State

Efficiency: Reduces the need to repeat login steps or other setup processes for each test.
Consistency: Ensures that tests start with a known state, reducing flakiness.
Reusability: Allows sharing of the same state across different tests or even different projects.

Practical Use Cases

Authentication: Save the logged-in state after performing a login action and reuse it for subsequent tests.
Setup Data: Preload certain data into local storage or session storage that is required for tests.
Cross-Test Data Sharing: Maintain a consistent state across multiple test files or suites.


*/

const { test, expect } = require('@playwright/test');
let webContext;


test.beforeAll(async ({ browser }) => {
    const context = await browser.newContext();
    const page = await context.newPage();
    await page.goto("https://rahulshettyacademy.com/client");
    await page.locator("#userEmail").fill("sam@mailinator.com");
    await page.locator("#userPassword").fill("SamKumar@123");
    await page.locator("[value='Login']").click();
    await page.waitForLoadState('networkidle');
    await context.storageState({path:'state.json'});
    webContext = await browser.newContext({ storageState: 'state.json' });
    
    
    

}
)

test('E2E automation', async()=>{
    //This test if for login to the ecom app and select a product dynamically and add to cart and 
    //verify the product is added to cart in cart page 
    //checkout and fill the checkout page information ->select country from checkout page dynamically
    
     const page=await webContext.newPage();
      const username=page.locator('input[id="userEmail"]');
      const password=page.locator('input[id="userPassword"]');
      const sighIn=page.locator('input[id="login"]');
      const ProductList=page.locator('.card-body');
      const productSelect="ZARA COAT 3";
      await  page.goto('https://rahulshettyacademy.com/client/');
      // waitForLoadState() method is used to wait for network calls to be completed
      await page.waitForLoadState('networkidle');
      const allTitles= await page.locator(".card-body b").allTextContents();
     console.log(allTitles);
     await page.pause();
})